# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..file_utils import requires_backends


class TensorFlowBenchmarkArguments:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TensorFlowBenchmark:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


def tf_top_k_top_p_filtering(*args, **kwargs):
    requires_backends(tf_top_k_top_p_filtering, ["tf"])


TF_LAYOUTLM_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFLayoutLMForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLayoutLMForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLayoutLMForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLayoutLMMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFLayoutLMModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLayoutLMPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFSequenceSummary:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFSharedEmbeddings:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


def shape_list(*args, **kwargs):
    requires_backends(shape_list, ["tf"])


TF_ALBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFAlbertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAlbertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAlbertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFAlbertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAlbertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAlbertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAlbertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFAlbertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAlbertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_MODEL_FOR_CAUSAL_LM_MAPPING = None


TF_MODEL_FOR_MASKED_LM_MAPPING = None


TF_MODEL_FOR_MULTIPLE_CHOICE_MAPPING = None


TF_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING = None


TF_MODEL_FOR_PRETRAINING_MAPPING = None


TF_MODEL_FOR_QUESTION_ANSWERING_MAPPING = None


TF_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING = None


TF_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING = None


TF_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING = None


TF_MODEL_MAPPING = None


TF_MODEL_WITH_LM_HEAD_MAPPING = None


class TFAutoModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForSeq2SeqLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFAutoModelWithLMHead:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBartForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBartModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBartPretrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_BERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFBertEmbeddings:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFBertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBlenderbotForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBlenderbotModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBlenderbotPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBlenderbotSmallForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBlenderbotSmallModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFBlenderbotSmallPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_CAMEMBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFCamembertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCamembertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCamembertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCamembertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCamembertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCamembertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_CONVBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFConvBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFConvBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFConvBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFConvBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFConvBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFConvBertLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFConvBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFConvBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_CTRL_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFCTRLForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCTRLLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCTRLModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFCTRLPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_DEBERTA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFDebertaForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_DEBERTA_V2_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFDebertaV2ForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaV2ForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaV2ForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaV2ForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaV2Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDebertaV2PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_DISTILBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFDistilBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDistilBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDistilBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDistilBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDistilBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDistilBertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFDistilBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFDistilBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_DPR_CONTEXT_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST = None


TF_DPR_QUESTION_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST = None


TF_DPR_READER_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFDPRContextEncoder:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFDPRPretrainedContextEncoder:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFDPRPretrainedQuestionEncoder:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFDPRPretrainedReader:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFDPRQuestionEncoder:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFDPRReader:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


TF_ELECTRA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFElectraForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFElectraForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFElectraForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFElectraForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFElectraForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFElectraForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFElectraModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFElectraPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_FLAUBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFFlaubertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFlaubertForQuestionAnsweringSimple:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFlaubertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFlaubertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFlaubertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFlaubertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFlaubertWithLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_FUNNEL_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFFunnelBaseModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFFunnelForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFFunnelPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_GPT2_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFGPT2DoubleHeadsModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFGPT2ForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFGPT2LMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFGPT2MainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFGPT2Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFGPT2PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_HUBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFHubertForCTC:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFHubertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFHubertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLEDForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLEDModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLEDPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_LONGFORMER_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFLongformerForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLongformerSelfAttention:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


TF_LXMERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFLxmertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFLxmertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFLxmertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLxmertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFLxmertVisualFeatureEncoder:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFMarianModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMarianMTModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMarianPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMBartForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMBartModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMBartPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_MOBILEBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFMobileBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMobileBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMobileBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFMobileBertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFMobileBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMobileBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMobileBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMobileBertMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFMobileBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMobileBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_MPNET_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFMPNetForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMPNetForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMPNetForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMPNetForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMPNetForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMPNetMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFMPNetModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMPNetPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMT5EncoderModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMT5ForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFMT5Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFOpenAIGPTDoubleHeadsModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFOpenAIGPTForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFOpenAIGPTLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFOpenAIGPTMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFOpenAIGPTModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFOpenAIGPTPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFPegasusForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFPegasusModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFPegasusPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRagModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRagPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRagSequenceForGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFRagTokenForGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


TF_REMBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFRemBertForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFRemBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRemBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFRobertaForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRobertaForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRobertaForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRobertaForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRobertaForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRobertaMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFRobertaModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRobertaPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_ROFORMER_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFRoFormerForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFRoFormerModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFRoFormerPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_T5_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFT5EncoderModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFT5ForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFT5Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFT5PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFAdaptiveEmbedding:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFTransfoXLForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFTransfoXLLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFTransfoXLMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFTransfoXLModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFTransfoXLPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_WAV_2_VEC_2_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFWav2Vec2ForCTC:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFWav2Vec2Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFWav2Vec2PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_XLM_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFXLMForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMForQuestionAnsweringSimple:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFXLMModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMWithLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_XLM_ROBERTA_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFXLMRobertaForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMRobertaForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMRobertaForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMRobertaForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMRobertaForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLMRobertaModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


TF_XLNET_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TFXLNetForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLNetForQuestionAnsweringSimple:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLNetForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLNetForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLNetLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLNetMainLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class TFXLNetModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class TFXLNetPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["tf"])


class AdamWeightDecay:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class GradientAccumulator:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


class WarmUp:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])


def create_optimizer(*args, **kwargs):
    requires_backends(create_optimizer, ["tf"])


class TFTrainer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["tf"])
